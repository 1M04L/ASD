#include <iostream>
#include <cstdlib>
#include <ctime>
#include <chrono>

using namespace std;

int totalCost(int numberOfCities, int** matrix, int* route) {
    int total = 0;
    for (int i = 0; i < numberOfCities; i++) {
        int from = route[i];
        int to = route[(i + 1) % numberOfCities];
        total += matrix[from][to];
    }
    return total;
}

bool nextPermutation(int *arr, int n) {
    int i = n - 2;
    while (i >= 0 && arr[i] >= arr[i + 1]) {
        i--;
    }
    if (i < 0) {
        return false;
    }
    int j = n - 1;
    while (arr[j] <= arr[i]) {
        j--;
    }
    swap(arr[i], arr[j]);

    int left = i + 1;
    int right = n - 1;
    while (left < right) {
        swap(arr[left], arr[right]);
        left++;
        right--;
    }
    return true;
}

void fillMatrixRandomly(int** matrix, int numberOfCities) {
    srand(time(0));
    for (int i = 0; i < numberOfCities; i++) {
        for (int j = 0; j < numberOfCities; j++) {
            if (i == j) {
                matrix[i][j] = 0;
            } else {
                matrix[i][j] = rand() % 100 + 1;
            }
        }
    }
}

int findMinNonZero(int* row, int numberOfCities) {
    int minIndex = -1;
    int minValue = 999999; 
    for (int j = 0; j < numberOfCities; j++) {
        if (row[j] != 0 && row[j] < minValue) {
            minValue = row[j];
            minIndex = j;
        }
    }
    return minIndex;
}

int main() {
    for (int numberOfCities = 7; numberOfCities <= 10; numberOfCities++) {
        cout << "(---...(.)...(.)...---)" << endl;
        cout << "count of cities: " << numberOfCities << endl;

        int** matrix = new int*[numberOfCities];
        for (int i = 0; i < numberOfCities; i++) {
            matrix[i] = new int[numberOfCities];
        }

        fillMatrixRandomly(matrix, numberOfCities);

        int startNumber;
        cout << "number of da start city (from 0 to " << numberOfCities - 1 << "): ";
        cin >> startNumber;

        int *cities = new int[numberOfCities];
        for (int i = 0; i < numberOfCities; i++) {
            cities[i] = i;
        }

        int *bestRoute = new int[numberOfCities];
        int bestRouteCost = 9999999;

        int *route = new int[numberOfCities];

        route[0] = startNumber;

        int index = 1;
        for (int i = 0; i < numberOfCities; i++) {
            if (cities[i] != startNumber) {
                route[index++] = cities[i];
            }
        }

        auto start = chrono::high_resolution_clock::now();
        do {
            int currentCost = totalCost(numberOfCities, matrix, route);

            if (currentCost < bestRouteCost) {
                bestRouteCost = currentCost;
                for (int i = 0; i < numberOfCities; i++) {
                    bestRoute[i] = route[i];
                }
            }

        } while (nextPermutation(cities, numberOfCities));
        auto end = chrono::high_resolution_clock::now();
        auto duration = chrono::duration_cast<chrono::milliseconds>(end - start);

        cout << "optimal route: ";
        for (int i = 0; i < numberOfCities; i++) {
            cout << bestRoute[i] << " ";
        }
        cout << endl;
        cout << "total Cost: " << bestRouteCost << endl;
        cout << "time : " << duration.count() << " milliseconds" << endl;

        delete[] route;
        delete[] bestRoute;
        delete[] cities;
        for (int i = 0; i < numberOfCities; i++) {
            delete[] matrix[i];
        }
        delete[] matrix;
    }
    return 0;
}
